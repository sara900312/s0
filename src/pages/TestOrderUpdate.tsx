import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

const TestOrderUpdate = () => {
  const [orderId, setOrderId] = useState('');
  const [returnReason, setReturnReason] = useState('');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const testUpdateToReturned = async () => {
    if (!orderId.trim()) {
      toast({
        title: "ุฎุทุฃ",
        description: "ูุฑุฌู ุฅุฏุฎุงู ูุนุฑู ุงูุทูุจ",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    try {
      console.log('๐ ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุงูุทูุจ:', {
        orderId,
        returnReason,
        timestamp: new Date().toISOString()
      });

      // ุฃููุงูุ ุฏุนูุง ูุฌูุจ ุงูุทูุจ ููุชุฃูุฏ ูู ูุฌูุฏู
      const { data: orderData, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (fetchError) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจ:', fetchError);
        throw fetchError;
      }

      console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุงูุทูุจ:', orderData);

      // ุงูุขู ุฏุนูุง ูุญุฏุซ ุงูุทูุจ
      const updateData = {
        order_status: 'returned',
        status: 'returned',
        updated_at: new Date().toISOString(),
        order_details: returnReason ? `Return reason: ${returnReason}` : orderData.order_details
      };

      console.log('๐ค ุจูุงูุงุช ุงูุชุญุฏูุซ:', updateData);

      const { data: updateResult, error: updateError } = await supabase
        .from('orders')
        .update(updateData)
        .eq('id', orderId)
        .select();

      if (updateError) {
        console.error('โ ุฎุทุฃ ูู ุงูุชุญุฏูุซ:', {
          error: updateError,
          message: updateError.message,
          details: updateError.details,
          hint: updateError.hint,
          code: updateError.code
        });
        throw updateError;
      }

      console.log('โ ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ:', updateResult);

      toast({
        title: "ูุฌุญ ุงูุชุญุฏูุซ",
        description: "ุชู ุชุญุฏูุซ ุงูุทูุจ ุฅูู ุญุงูุฉ ูุฑุชุฌุนุฉ ุจูุฌุงุญ"
      });

    } catch (error: any) {
      console.error('โ ุฎุทุฃ ุนุงู:', {
        error,
        message: error?.message || error,
        stack: error?.stack
      });

      toast({
        title: "ุฎุทุฃ ูู ุงูุชุญุฏูุซ",
        description: error?.message || "ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchAllOrders = async () => {
    try {
      console.log('๐ ุฌูุจ ุฌููุน ุงูุทูุจุงุช...');
      
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .limit(5);

      if (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช:', error);
        throw error;
      }

      console.log('๐ ุงูุทูุจุงุช ุงูููุฌูุฏุฉ:', data);
      
      toast({
        title: "ุชู ุฌูุจ ุงูุทูุจุงุช",
        description: `ุชู ุงูุนุซูุฑ ุนูู ${data.length} ุทูุจุงุช`
      });

    } catch (error: any) {
      console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช:', error);
      toast({
        title: "ุฎุทุฃ",
        description: error?.message || "ุญุฏุซ ุฎุทุฃ ูู ุฌูุจ ุงูุทูุจุงุช",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6" dir="rtl">
      <div className="max-w-2xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>ุงุฎุชุจุงุฑ ุชุญุฏูุซ ุงูุทูุจุงุช</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            
            <Button onClick={fetchAllOrders} variant="outline" className="w-full">
              ุนุฑุถ ุฌููุน ุงูุทูุจุงุช ูู ุงููููุณูู
            </Button>
            
            <div>
              <label className="block text-sm font-medium mb-2">
                ูุนุฑู ุงูุทูุจ (ID)
              </label>
              <Input
                value={orderId}
                onChange={(e) => setOrderId(e.target.value)}
                placeholder="ุฃุฏุฎู ูุนุฑู ุงูุทูุจ"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                ุณุจุจ ุงูุฅุฑุฌุงุน (ุงุฎุชูุงุฑู)
              </label>
              <Textarea
                value={returnReason}
                onChange={(e) => setReturnReason(e.target.value)}
                placeholder="ุฃุฏุฎู ุณุจุจ ุฅุฑุฌุงุน ุงูุทูุจ"
                rows={3}
              />
            </div>

            <Button 
              onClick={testUpdateToReturned}
              disabled={loading}
              className="w-full"
            >
              {loading ? "ุฌุงุฑู ุงูุชุญุฏูุซ..." : "ุชุญุฏูุซ ุงูุทูุจ ุฅูู ูุฑุชุฌุน"}
            </Button>

            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-semibold text-blue-800 mb-2">ุชุนูููุงุช:</h3>
              <ol className="text-sm text-blue-700 space-y-1">
                <li>1. ุงุถุบุท ุนูู "ุนุฑุถ ุฌููุน ุงูุทูุจุงุช" ุฃููุงู</li>
                <li>2. ุงูุชุญ ูุญุฏุฉ ุงูุชุญูู (F12) ูุฑุคูุฉ ุจูุงูุงุช ุงูุทูุจุงุช</li>
                <li>3. ุงูุณุฎ ูุนุฑู ุทูุจ ููุฌูุฏ</li>
                <li>4. ุฃุฏุฎู ุงููุนุฑู ูู ุงูุญูู ุฃุนูุงู</li>
                <li>5. ุงุถุบุท ุนูู "ุชุญุฏูุซ ุงูุทูุจ ุฅูู ูุฑุชุฌุน"</li>
                <li>6. ุฑุงูุจ ุงูุฃุฎุทุงุก ูู ุงููููุณูู</li>
              </ol>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TestOrderUpdate;
